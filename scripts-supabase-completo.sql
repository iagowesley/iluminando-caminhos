-- ============================================
-- SCRIPTS COMPLETOS PARA SUPABASE - IGREJA ADVENTISTA
-- ============================================
-- Execute estes scripts na ordem apresentada no SQL Editor do Supabase
-- ============================================

-- ============================================
-- 1. TABELA DE LÍDERES (leaders)
-- ============================================

CREATE TABLE IF NOT EXISTS leaders (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    role TEXT NOT NULL,
    image TEXT NOT NULL,
    shortDescription TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS (Row Level Security)
ALTER TABLE leaders ENABLE ROW LEVEL SECURITY;

-- Políticas para líderes
CREATE POLICY "Acesso público para visualizar líderes" ON leaders
    FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir líderes" ON leaders
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar líderes" ON leaders
    FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir líderes" ON leaders
    FOR DELETE USING (true);

-- ============================================
-- 2. TABELA DE FOTOS DA GALERIA (photos)
-- ============================================

CREATE TABLE IF NOT EXISTS photos (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    src TEXT NOT NULL,
    alt TEXT NOT NULL,
    category TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE photos ENABLE ROW LEVEL SECURITY;

-- Políticas para fotos
CREATE POLICY "Acesso público para visualizar fotos" ON photos
    FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir fotos" ON photos
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar fotos" ON photos
    FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir fotos" ON photos
    FOR DELETE USING (true);

-- ============================================
-- 3. TABELA DE EVENTOS (events)
-- ============================================

CREATE TABLE IF NOT EXISTS events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    date TEXT NOT NULL,
    time TEXT NOT NULL,
    location TEXT NOT NULL,
    description TEXT NOT NULL,
    category TEXT NOT NULL,
    image TEXT NOT NULL,
    featured BOOLEAN DEFAULT false,
    audience TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE events ENABLE ROW LEVEL SECURITY;

-- Políticas para eventos
CREATE POLICY "Acesso público para visualizar eventos" ON events
    FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir eventos" ON events
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar eventos" ON events
    FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir eventos" ON events
    FOR DELETE USING (true);

-- ============================================
-- 4. TABELAS DE ESTUDOS BÍBLICOS
-- ============================================

-- Tabela de estudos bíblicos
CREATE TABLE IF NOT EXISTS bible_studies (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    image TEXT NOT NULL,
    instructor TEXT NOT NULL,
    whatsapp TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE bible_studies ENABLE ROW LEVEL SECURITY;

-- Políticas para estudos bíblicos
CREATE POLICY "Acesso público para visualizar estudos" ON bible_studies
    FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir estudos" ON bible_studies
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar estudos" ON bible_studies
    FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir estudos" ON bible_studies
    FOR DELETE USING (true);

-- Tabela de lições dos estudos bíblicos
CREATE TABLE IF NOT EXISTS lessons (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    study_id BIGINT REFERENCES bible_studies(id) ON DELETE CASCADE NOT NULL,
    title TEXT NOT NULL,
    description TEXT NOT NULL,
    "order" INT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE lessons ENABLE ROW LEVEL SECURITY;

-- Políticas para lições
CREATE POLICY "Acesso público para visualizar lições" ON lessons
    FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir lições" ON lessons
    FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar lições" ON lessons
    FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir lições" ON lessons
    FOR DELETE USING (true);

-- ============================================
-- 5. TABELAS DE ESCALAS/PROGRAMAÇÃO
-- ============================================

-- Tabela de tipos de culto
CREATE TABLE IF NOT EXISTS service_types (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name TEXT NOT NULL,
    default_time TEXT NOT NULL,
    order_index INT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Tabela de escalas
CREATE TABLE IF NOT EXISTS schedules (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    service_type_id BIGINT REFERENCES service_types(id) ON DELETE CASCADE NOT NULL,
    date TEXT NOT NULL,
    preacher TEXT,
    worship TEXT,
    reception TEXT,
    opening TEXT,
    sabbath_school TEXT,
    deacons TEXT,
    platform TEXT,
    is_hidden BOOLEAN DEFAULT false,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE service_types ENABLE ROW LEVEL SECURITY;
ALTER TABLE schedules ENABLE ROW LEVEL SECURITY;

-- Políticas para tipos de culto
CREATE POLICY "Acesso público para leitura de tipos de culto" 
ON service_types FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir tipos de culto" 
ON service_types FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar tipos de culto" 
ON service_types FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir tipos de culto" 
ON service_types FOR DELETE USING (true);

-- Políticas para escalas
CREATE POLICY "Acesso público para leitura de escalas" 
ON schedules FOR SELECT USING (true);

CREATE POLICY "Permissão para inserir escalas" 
ON schedules FOR INSERT WITH CHECK (true);

CREATE POLICY "Permissão para atualizar escalas" 
ON schedules FOR UPDATE USING (true);

CREATE POLICY "Permissão para excluir escalas" 
ON schedules FOR DELETE USING (true);

-- ============================================
-- 6. DADOS INICIAIS - TIPOS DE CULTO
-- ============================================

INSERT INTO service_types (name, default_time, order_index) 
VALUES 
('Culto de Domingo', '19h', 1),
('Culto de Quarta', '19h30', 2),
('Culto de Sábado', '9h (Escola Sabatina) e 11h (Culto Divino)', 3)
ON CONFLICT DO NOTHING;

-- ============================================
-- 7. STORAGE BUCKETS E POLÍTICAS
-- ============================================

-- Bucket para líderes
DO $$
BEGIN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('leaders', 'leaders', true)
    ON CONFLICT (id) DO NOTHING;
END
$$;

-- Políticas para bucket leaders
CREATE POLICY "Acesso público para visualizar imagens de líderes" ON storage.objects
    FOR SELECT
    USING (bucket_id = 'leaders');

CREATE POLICY "Acesso para fazer upload de imagens de líderes" ON storage.objects
    FOR INSERT
    WITH CHECK (bucket_id = 'leaders');

CREATE POLICY "Acesso para atualizar imagens de líderes" ON storage.objects
    FOR UPDATE
    USING (bucket_id = 'leaders');

CREATE POLICY "Acesso para remover imagens de líderes" ON storage.objects
    FOR DELETE
    USING (bucket_id = 'leaders');

-- Bucket para galeria de fotos
DO $$
BEGIN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('photos', 'photos', true)
    ON CONFLICT (id) DO NOTHING;
END
$$;

-- Políticas para bucket photos
CREATE POLICY "Acesso público para visualizar fotos da galeria" ON storage.objects
    FOR SELECT
    USING (bucket_id = 'photos');

CREATE POLICY "Acesso para fazer upload de fotos da galeria" ON storage.objects
    FOR INSERT
    WITH CHECK (bucket_id = 'photos');

CREATE POLICY "Acesso para atualizar fotos da galeria" ON storage.objects
    FOR UPDATE
    USING (bucket_id = 'photos');

CREATE POLICY "Acesso para remover fotos da galeria" ON storage.objects
    FOR DELETE
    USING (bucket_id = 'photos');

-- Bucket para eventos
DO $$
BEGIN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('events', 'events', true)
    ON CONFLICT (id) DO NOTHING;
END
$$;

-- Políticas para bucket events
CREATE POLICY "Acesso público para visualizar imagens de eventos" ON storage.objects
    FOR SELECT
    USING (bucket_id = 'events');

CREATE POLICY "Acesso para fazer upload de imagens de eventos" ON storage.objects
    FOR INSERT
    WITH CHECK (bucket_id = 'events');

CREATE POLICY "Acesso para atualizar imagens de eventos" ON storage.objects
    FOR UPDATE
    USING (bucket_id = 'events');

CREATE POLICY "Acesso para remover imagens de eventos" ON storage.objects
    FOR DELETE
    USING (bucket_id = 'events');

-- Bucket para estudos bíblicos
DO $$
BEGIN
    INSERT INTO storage.buckets (id, name, public)
    VALUES ('bible-studies', 'bible-studies', true)
    ON CONFLICT (id) DO NOTHING;
END
$$;

-- Políticas para bucket bible-studies
CREATE POLICY "Acesso público para visualizar imagens de estudos bíblicos" ON storage.objects
    FOR SELECT
    USING (bucket_id = 'bible-studies');

CREATE POLICY "Acesso para fazer upload de imagens de estudos bíblicos" ON storage.objects
    FOR INSERT
    WITH CHECK (bucket_id = 'bible-studies');

CREATE POLICY "Acesso para atualizar imagens de estudos bíblicos" ON storage.objects
    FOR UPDATE
    USING (bucket_id = 'bible-studies');

CREATE POLICY "Acesso para remover imagens de estudos bíblicos" ON storage.objects
    FOR DELETE
    USING (bucket_id = 'bible-studies');

-- ============================================
-- 8. TABELA DE USUÁRIOS ADMIN (user_roles)
-- ============================================

CREATE TABLE IF NOT EXISTS user_roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,
    role TEXT NOT NULL DEFAULT 'user',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() NOT NULL
);

-- Habilitar RLS
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;

-- Políticas para user_roles
CREATE POLICY "Usuários podem ver suas próprias roles" ON user_roles
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Admins podem gerenciar roles" ON user_roles
    FOR ALL USING (
        EXISTS (
            SELECT 1 FROM user_roles 
            WHERE user_id = auth.uid() AND role = 'admin'
        )
    );

-- ============================================
-- FINALIZAÇÃO
-- ============================================

-- Verificar se todas as tabelas foram criadas
SELECT 
    table_name,
    table_type
FROM information_schema.tables 
WHERE table_schema = 'public' 
    AND table_name IN ('leaders', 'photos', 'events', 'bible_studies', 'lessons', 'service_types', 'schedules')
ORDER BY table_name;

-- Verificar se todos os buckets foram criados
SELECT id, name, public FROM storage.buckets WHERE id IN ('leaders', 'photos', 'events', 'bible-studies');
